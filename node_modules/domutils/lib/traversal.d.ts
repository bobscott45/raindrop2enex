import type { Node, Element, NodeWithChildren } from "domhandler";
export declare function getChildren(elem: Node): Node[];
export declare function getParent(elem: Element): Element | null;
export declare function getParent(elem: Node): NodeWithChildren | null;
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first.
 * If we don't have a parent (the element is a root node),
 * we walk the element's `prev` & `next` to get all remaining nodes.
 *
 * @param elem Element to get the siblings of.
 */
export declare function getSiblings(elem: Node): Node[];
/**
 * Gets an attribute from an element.
 *
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 */
export declare function getAttributeValue(elem: Element, name: string): string | undefined;
/**
 * Checks whether an element has an attribute.
 *
 * @param elem Element to check.
 * @param name Attribute name to look for.
 */
export declare function hasAttrib(elem: Element, name: string): boolean;
/**
 * Returns the name property of an element
 *
 * @param elem The element to get the name for
 */
export declare function getName(elem: Element): string;
export declare function nextElementSibling(elem: Node): Node | null;
//# sourceMappingURL=traversal.d.ts.map